service: servis 


environment:
   pera : mika

custom:
  myStage: ${opt:stage, self:provider.stage}
  test: test2
  accountId : 553770165424
  settings:
    nekiId : "lalalal"
    radni:
      ITEMS_DYNAMODB_TABLE: nemanja-baza-radni
    prod:
      ITEMS_DYNAMODB_TABLE: nemanja-baza-prod


provider:
  name: aws
  runtime: nodejs8.10
  stage: radni
  region: us-east-1
  environment: ${self:custom.settings.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:ListStreams"
        - "states:StartExecution"
        - "states:ListStateMachines"
      Resource: 
        # -  "arn:aws:states:*:*:*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.myStage}.ITEMS_DYNAMODB_TABLE}"
        - "arn:aws:states:us-east-1:553770165424:stateMachine:Helloworld_4"
        - "arn:aws:states:us-east-1:553770165424:stateMachine:hello"

functions:
  test_jedan:
    handler: handler.test_jedan
    environment:
      samo_ovde: samo_ovde_opis
      samo_ovde_2 : ${self:custom.test}
    events:
     - http:
         path: jedan/{id}
         method: get
         private: true
         request:
          parameters:
            id: true 
  test_post:
    handler: handler.test_post
    events:
     - http:
         path: postic
         method: post
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: item
          method: post
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
  step_function:
    handler: handler.step_function
    events:
      - http:
          path: step_function
          method: get
  step_function_koja_se_poziva:
    handler: handler.step_function_koja_se_poziva
    events:
      - http:
          path: step_function_koja_se_poziva
          method: get
  call_step_function:
    handler: handler.call_step_function
    events:
      - http:
          path: call_step_function
          method: get
  hello:
    handler: handler.hello
  ciao:
    handler: handler.ciao
  final:
    handler: handler.final

  executeStepFunction:
    handler: handler.executeStepFunction
    events:
      - http:
          path: execute_step_function
          method: get
  # calculateRandomNumber:
  #   handler: handler.calculateRandomNumber
  # moreCalculations:
  #   handler: handler.moreCalculations



resources:
  Resources:
    ImagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "itemId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "itemId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.${self:custom.myStage}.ITEMS_DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE



stepFunctions:
  stateMachines:
    hellostepfunc1:
      # events:
      #   - http:
      #       path: pera
      #       method: GET
      name: 'hello'
      definition:
        Comment: "A Hello World example"
        StartAt: HelloWorld
        States:
          HelloWorld:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-hello"
            Next: FinalState
          # CiaoWorld:
          #   Type: Task
          #   Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-ciao"
          #   End: true
          FinalState:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-final"
            End: true
 

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters      
